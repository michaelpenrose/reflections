What happens when you initialize a repository? Why do you need to do it?

Git creates the metadata to track changes in the repository
Git knows that this is a repository not just a regular folder

How is the staging area different from the working directory and the repository? What value do you think it offers?

The staging area contains changes that are selected for and ready to be committed.
The staging area does not have to contain all changes. 
As such it is different to a diff of past and present states of the working directory.
The staging area contains uncommitted changes whereas the repository contains committed changes.
The staging area allows more fine-grained control over what files are added to a commit.

How can you use the staging area to make sure you have one commit per logical change?

If you have separate changes to several files in the working directory use git add to choose which ones to add to the staging area.
Then commit from the staging area to the repository. This empties the staging area.
Then do another git add to put a separate logical commit in the staging area.
use git diff without any arguments to compare the state of the working directory and the staging area
use git diff --staged to compare staging area to repository

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

by using checkout on a branch not an id you don't have to remember id names
checking out a branch always takes you to the latest state of the branch
having branches allows larger code experiments without disrupting a working state

How do the diagrams help you visualize the branch structure?

I skipped this as I felt I got the idea of branches
The branches the instructors drew were useful to show master, other branches, commits etc